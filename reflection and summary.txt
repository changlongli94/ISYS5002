
The goal of this project was to create a Python application called "Weather Advisor," capable of fetching weather information and providing a natural language interface for interaction.
Initially, I had a somewhat vague understanding of the overall program structure and the specific functionalities required. Therefore, I consulted the AI assistant regarding the project's core requirements. Based on the assignment guidelines, the AI assistant helped me outline the main modules the program needed, such as a weather data component, a natural language processing module, a user interface, and at least two types of data visualizations. It also provided a framework for core function definitions, like get_weather_data, parse_weather_question, etc., which laid the foundation for subsequent development.
After the AI assistant provided an initial code framework, I encountered a ModuleNotFoundError when trying to run it, indicating a missing pyinputplus module. I reported this error to the AI assistant, which quickly identified the issue and informed me that I needed to install the library first, providing the necessary installation command.
Once the basic environment issues were resolved, I wanted to incorporate more practical features, such as displaying sunrise/sunset times and "feels like" temperature, which are common in other weather applications. I described these requirements to the AI assistant. It guided me on how to modify the get_weather_data function (initially using mock data) to include these new data points and correspondingly update the information display function display_weather_info and the natural language parsing function parse_weather_question to recognize and respond to queries about these new features.
A core functionality of the program is fetching real weather data. I consulted the AI assistant on how to use the wttr.in weather service. The AI assistant explained its API endpoint (specifically the JSON format output ?format=j1) and assisted me in refactoring the get_weather_data function to fetch real-time data from the web using the requests library and parse the returned JSON. Understanding the data structure returned by wttr.in was crucial in this process, and the AI assistant helped clarify how to extract current weather conditions (like temperature, wind speed, humidity) and forecast information for the next few days (like max/min temperatures, precipitation chance). We also discussed and implemented error handling logic for potential network request issues (e.g., location not found, connection timeout).
After successfully fetching real data, I asked the AI assistant if wttr.in could provide even more useful weather information. The AI listed several other available data points, such as visibility, pressure, UV index, and moon phase, moonrise/moonset times. Consequently, we collaborated again to integrate these new data points into the get_weather_data function and updated the display_weather_info function to present this richer information in the user interface. The natural language processing part was also adjusted to recognize queries about this additional information.
Next was data visualization. The assignment required at least two different types. The AI assistant first helped me implement visualizations for temperature trends (line chart) and precipitation chance (bar chart). When I requested a visualization for the UV index, the AI assistant created a new function, create_uv_index_visualisation. This function not only plotted a bar chart but also used different colors to mark the bars based on the UV index intensity, making the chart more intuitive. The main menu was also updated to allow users to select this new chart.
Finally, I aimed to visualize all available numerical forecast data through charts. The AI assistant helped me analyze which data points were suitable for trend charts (such as daily humidity, wind speed, pressure, visibility, for which we decided to extract representative values from specific hourly forecasts). It then created new visualization functions for each of these (create_humidity_visualisation, create_wind_speed_visualisation, etc.) and updated the main menu again, allowing users to choose from these new charts after fetching weather details, or even opt to display all available forecast charts at once.
Overall, throughout the development process, the AI assistant was very helpful in structuring the program, writing specific functions, debugging errors, explaining API data structures, and extending new functionalities based on my requests. My main role was to define the requirements, guide the AI assistant's direction, test the code and solutions it generated, and provide feedback or ask for clarifications when its suggestions didn't fully meet expectations or had issues, thereby progressively refining the program.
